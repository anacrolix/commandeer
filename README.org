** Commandeer
Do you...
- like to develop Go apps as libraries with tiny main packages?
- get frustrated keeping your flags up to date as your code evolves?
- feel irked by the overlap between comments on struct fields and help strings for flags?
- hate switching between your app's main and library packages?

You've come to the right place. See the [[https://godoc.org/github.com/jaffee/commandeer][godocs]] for detailed usage, or just...

** Try It!
Here's how it works, define your app like so:
#+BEGIN_SRC go
package myapp

import "fmt"

type Main struct {
	Num     int    `help:"How many does it take?"`
	Vehicle string `help:"What did they get?"`
}

func NewMain() *Main { return &Main{Num: 5, Vehicle: "jeep"} }

func (m *Main) Run() error {
	if m.Num < 2 || m.Vehicle == "" {
		return fmt.Errorf("Need more gophers and/or vehicles.")
	}
	fmt.Printf("%d gophers stole my %s!\n", m.Num, m.Vehicle)
	return nil
}
#+END_SRC

and your main package:
#+BEGIN_SRC go
package main

import (
	"fmt"

	"github.com/jaffee/commandeer"
	"github.com/jaffee/commandeer/examples/myapp"
)

func main() {
	err := commandeer.Run(myapp.NewMain())
	if err != nil {
		fmt.Println(err)
	}
}
#+END_SRC

Now...
#+BEGIN_SRC bash
$ ./myapp -h
Usage of ./myapp:
  -num int
    	How many does it take? (default 5)
  -vehicle string
    	What did they get? (default "jeep")

$ ./myapp
5 gophers stole my jeep!
$ ./myapp
3 gophers stole my horse!
#+END_SRC

If you aren't allergic to external dependencies, you can also try
=github.com/jaffee/commandeer/cobrafy= which pulls in the excellent [[https://github.com/spf13/cobra][Cobra]] and
[[https://github.com/spf13/pflag][pflag]] packages which will give you GNU/POSIX style flags and some other nice
features should you care to use them. See the [[https://godocs.org/github.com/commandeer/cobrafy][godocs]], or the [[https://github.com/jaffee/commandeer/blob/master/examples/myapp/cmd/myapp-cobrafy/main.go][myapp-cobrafy example]].
